CREATE DATABASE bdfunsion;

--1
CREATE OR REPLACE FUNCTION saludar(nombre TEXT)
RETURNS TEXT AS $$
BEGIN
    RETURN 'Hola, ' || nombre || '!';
END;
$$ LANGUAGE plpgsql;


SELECT saludar('Juan');
-- Resultado: Hola, Juan!

--2
CREATE OR REPLACE FUNCTION calcular_area_circulo(radio NUMERIC)
RETURNS NUMERIC AS $$
BEGIN
    RETURN PI() * radio^2;
END;
$$ LANGUAGE plpgsql;

SELECT calcular_area_circulo(10);
-- Resultado: 314.1592653589793

--3
CREATE OR REPLACE FUNCTION contar_registros(tabla TEXT)
RETURNS INTEGER AS $$
DECLARE
    total_registros INTEGER;
BEGIN
    -- Verificamos si la tabla existe usando quote_ident para proteger el nombre de la tabla
    EXECUTE 'SELECT COUNT(*) FROM ' || quote_ident(tabla)
    INTO total_registros;
    
    RETURN total_registros;
EXCEPTION
    WHEN others THEN
        RAISE NOTICE 'Error al contar registros en la tabla: %', tabla;
        RETURN -1;  -- Retornar un valor de error en caso de que la tabla no exista o haya otro problema
END;
$$ LANGUAGE plpgsql;

SELECT contar_registros('usuarios');
-- Resultado: (El total de registros en la tabla 'usuarios')


--4
-- Paso 1: Crear la tabla (si no existe)
DROP TABLE IF EXISTS usuarios;

CREATE TABLE usuarios (
    id INT PRIMARY KEY,
    nombre VARCHAR(100),
    correo VARCHAR(100)
);

-- Paso 2: Insertar datos en la tabla
INSERT INTO usuarios (id, nombre, correo) VALUES
(1, 'Juan Pérez', 'juan.perez@example.com'),
(2, 'María López', 'maria.lopez@example.com'),
(3, 'Carlos Gómez', 'carlos.gomez@example.com');

-- Paso 3: Crear la función
CREATE OR REPLACE FUNCTION obtener_usuario(user_id INT)
RETURNS TABLE (nombre VARCHAR(100), correo VARCHAR(100)) AS $$
BEGIN
    RETURN QUERY
    SELECT nombre, correo
    FROM usuarios
    WHERE id = user_id;
END; $$ LANGUAGE plpgsql;

-- Paso 4: Probar la función
SELECT * FROM obtener_usuario(1);


--5
CREATE OR REPLACE FUNCTION dividir(numerador NUMERIC, denominador NUMERIC)
RETURNS NUMERIC AS $$
BEGIN
    -- Verificar si el denominador es cero
    IF denominador = 0 THEN
        RAISE EXCEPTION 'División por cero no permitida';
    ELSE
        RETURN numerador / denominador;
    END IF;
END;
$$ LANGUAGE plpgsql;


SELECT dividir(10, 2);  -- Resultado esperado: 5
SELECT dividir(10, 0);  -- Resultado esperado: Excepción 'División por cero no permitida'

--6
CREATE TABLE IF NOT EXISTS pedidos (
    id INT PRIMARY KEY,
    estado TEXT NOT NULL
);

INSERT INTO pedidos (id, estado) VALUES
(101, 'Pendiente'),
(102, 'Pendiente'),
(103, 'Pendiente');

CREATE FUNCTION actualizar_estado_pedido(pedido_id INT, nuevo_estado TEXT)
RETURNS BOOLEAN
BEGIN
    UPDATE pedidos
    SET estado = nuevo_estado
    WHERE id = pedido_id;

    RETURN TRUE;  -- Retorna TRUE si se realizó la actualización
END;

SELECT actualizar_estado_pedido(101, 'Enviado');

SELECT * FROM pedidos WHERE id = 101;

--7
CREATE TABLE pedidos (
    id INT PRIMARY KEY AUTO_INCREMENT,
    cliente_id INT,
    total DECIMAL(10, 2)
);

INSERT INTO pedidos (cliente_id, total) VALUES
(1, 100.50),
(2, 150.75),
(3, 200.00),
(4, 175.25);

DELIMITER //

CREATE FUNCTION obtener_pedido_mayor_total()
RETURNS TABLE (id INT, cliente_id INT, total DECIMAL(10, 2))
BEGIN
    RETURN (
        SELECT id, cliente_id, total
        FROM pedidos
        ORDER BY total DESC
        LIMIT 1
    );
END //

DELIMITER ;


SELECT * FROM obtener_pedido_mayor_total();

--8
CREATE FUNCTION calcular_area_rectangulo(ancho INT DEFAULT 1, alto INT DEFAULT 1)
RETURNS INT AS $$
BEGIN
    RETURN ancho * alto;
END;
$$ LANGUAGE plpgsql;


SELECT calcular_area_rectangulo(5, 3);  -- Resultado esperado: 15
SELECT calcular_area_rectangulo();        -- Resultado esperado: 1








