CREATE DATABASE bdfunsion;

--1
CREATE OR REPLACE FUNCTION saludar(nombre TEXT)
RETURNS TEXT AS $$
BEGIN
    RETURN 'Hola, ' || nombre || '!';
END;
$$ LANGUAGE plpgsql;


SELECT saludar('Juan');
-- Resultado: Hola, Juan!

--2
CREATE OR REPLACE FUNCTION calcular_area_circulo(radio NUMERIC)
RETURNS NUMERIC AS $$
BEGIN
    RETURN PI() * radio^2;
END;
$$ LANGUAGE plpgsql;

SELECT calcular_area_circulo(10);
-- Resultado: 314.1592653589793

--3
CREATE TABLE usuarios (
    id SERIAL PRIMARY KEY,
    nombre TEXT NOT NULL,
    email TEXT NOT NULL,
    fecha_registro DATE NOT NULL
);

INSERT INTO usuarios (nombre, email, fecha_registro) 
VALUES 
('Juan Pérez', 'juan.perez@example.com', '2024-01-15'),
('Ana Gómez', 'ana.gomez@example.com', '2024-02-20'),
('Luis Fernández', 'luis.fernandez@example.com', '2024-03-10');


CREATE OR REPLACE FUNCTION contar_registros(tabla TEXT)
RETURNS INTEGER AS $$
DECLARE
    total_registros INTEGER;
BEGIN
    -- Verificamos si la tabla existe usando quote_ident para proteger el nombre de la tabla
    EXECUTE 'SELECT COUNT(*) FROM ' || quote_ident(tabla)
    INTO total_registros;
    
    RETURN total_registros;
EXCEPTION
    WHEN others THEN
        RAISE NOTICE 'Error al contar registros en la tabla: %', tabla;
        RETURN -1;  -- Retornar un valor de error en caso de que la tabla no exista o haya otro problema
END;
$$ LANGUAGE plpgsql;

SELECT contar_registros('usuarios');

--4
-- Paso 1: Crear la tabla (si no existe)
DROP TABLE IF EXISTS usuarios;

CREATE TABLE usuarios (
    id INT PRIMARY KEY,
    nombre VARCHAR(100),
    correo VARCHAR(100)
);

-- Paso 2: Insertar datos en la tabla
INSERT INTO usuarios (id, nombre, correo) VALUES
(1, 'Juan Pérez', 'juan.perez@example.com'),
(2, 'María López', 'maria.lopez@example.com'),
(3, 'Carlos Gómez', 'carlos.gomez@example.com');

-- Paso 3: Crear la función
CREATE OR REPLACE FUNCTION obtener_usuario(user_id INT)
RETURNS TABLE (nombre VARCHAR, correo VARCHAR) AS $$
BEGIN
    RETURN QUERY
    SELECT u.nombre, u.correo
    FROM usuarios u
    WHERE u.id = user_id;
END;
$$ LANGUAGE plpgsql;

-- Paso 4: Probar la función
SELECT * FROM obtener_usuario(1);


--5
CREATE OR REPLACE FUNCTION dividir(numerador NUMERIC, denominador NUMERIC)
RETURNS NUMERIC AS $$
BEGIN
    -- Verificar si el denominador es cero
    IF denominador = 0 THEN
        RAISE EXCEPTION 'División por cero no permitida';
    ELSE
        RETURN numerador / denominador;
    END IF;
END;
$$ LANGUAGE plpgsql;


SELECT dividir(10, 2);  -- Resultado esperado: 5
SELECT dividir(10, 0);  -- Resultado esperado: Excepción 'División por cero no permitida'

--6
CREATE TABLE pedidos (
    id SERIAL PRIMARY KEY,
    cliente_nombre TEXT NOT NULL,
    estado TEXT NOT NULL
);


INSERT INTO pedidos (cliente_nombre, estado) 
VALUES 
('Juan Pérez', 'Pendiente'),
('Ana Gómez', 'Procesando'),
('Luis Fernández', 'Pendiente');


CREATE OR REPLACE FUNCTION actualizar_estado_pedido(pedido_id INT, nuevo_estado TEXT)
RETURNS VOID AS $$
BEGIN
    UPDATE pedidos
    SET estado = nuevo_estado
    WHERE id = pedido_id;
END;
$$ LANGUAGE plpgsql;

SELECT actualizar_estado_pedido(1, 'Enviado');

SELECT * FROM pedidos WHERE id = 1;

--7
DROP TABLE IF EXISTS pedidos;

CREATE TABLE pedidos (
    id SERIAL PRIMARY KEY,
    cliente_id INT NOT NULL,
    total NUMERIC(10, 2) NOT NULL
);

INSERT INTO pedidos (cliente_id, total) VALUES
(1, 100.50),
(2, 150.75),
(3, 200.00),
(4, 175.25);

CREATE OR REPLACE FUNCTION obtener_pedido_mayor_total()
RETURNS TABLE(pedido_id INT, cliente_id INT, total NUMERIC) AS $$
BEGIN
    RETURN QUERY
    SELECT p.id, p.cliente_id, p.total
    FROM pedidos p
    ORDER BY p.total DESC
    LIMIT 1;
END;
$$ LANGUAGE plpgsql;


SELECT * FROM obtener_pedido_mayor_total();

SELECT * FROM pedidos;

--8
CREATE FUNCTION calcular_area_rectangulo(ancho INT DEFAULT 1, alto INT DEFAULT 1)
RETURNS INT AS $$
BEGIN
    RETURN ancho * alto;
END;
$$ LANGUAGE plpgsql;


SELECT calcular_area_rectangulo(5, 3);  -- Resultado esperado: 15
SELECT calcular_area_rectangulo();        -- Resultado esperado: 1








